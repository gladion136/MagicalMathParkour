[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/ingame/GUI.tscn" type="PackedScene" id=1]
[ext_resource path="res://level/01_01_Linear_Intro.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/InGame.gd" type="Script" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasItem

const COORDINATE_SYSTEM_SIZE = 200 # * axis_scale to get pixel

const axis_label_length = 10

const axis_scale = 50

const stroke_width = 20

enum MODE {
	LINEAR,
	QUAD,
	SIN,
	EMPTY
}

var coordinate_system_center = Vector2.ZERO
var current_mode = MODE.LINEAR
var a = 0
var b = 0
var c = 0
var d = 0


func _ready():
	pass


func draw_linear(a, b):
	current_mode = MODE.LINEAR
	self.a = -a
	self.b = -b
	update()


func draw_quad(a, b, c):
	current_mode = MODE.QUAD
	self.a = -a
	self.b = -b
	self.c = -c
	update()


func draw_sin(a, b, c, d):
	current_mode = MODE.SIN
	self.a = -a
	self.b = b
	self.c = c
	self.d = -d
	update()


func _draw():
	print(\"called\")
	var vector_array = []
	match current_mode:
		MODE.LINEAR:
			for i in range(-COORDINATE_SYSTEM_SIZE * axis_scale, COORDINATE_SYSTEM_SIZE * axis_scale):
				var x = float(i) / axis_scale
				var y = a * x + b
				var on_map = Vector2(x * axis_scale + coordinate_system_center.x, y * axis_scale + coordinate_system_center.y)
				vector_array.append(on_map)
			draw_multiline(vector_array, ColorN(\"slateblue\"), stroke_width)
				
		MODE.QUAD:
			for i in range(-COORDINATE_SYSTEM_SIZE * axis_scale, COORDINATE_SYSTEM_SIZE * axis_scale):
				var x = float(i) / axis_scale
				var y = a * (x + b)*(x + b) + c
				var on_map = Vector2(x * axis_scale + coordinate_system_center.x, y * axis_scale + coordinate_system_center.y)
				vector_array.append(on_map)
			draw_multiline(vector_array, ColorN(\"slateblue\"), stroke_width)
		MODE.SIN:
			for i in range(-COORDINATE_SYSTEM_SIZE * axis_scale, COORDINATE_SYSTEM_SIZE * axis_scale):
				var x = float(i) / axis_scale
				var y = a*sin(b*2*PI*(x+c))+d
				var on_map = Vector2(x * axis_scale + coordinate_system_center.x, y * axis_scale + coordinate_system_center.y)
				vector_array.append(on_map)
			draw_multiline(vector_array, ColorN(\"slateblue\"), stroke_width)
	_draw_axis()


func _draw_axis():
	# x line
	#draw_line(Vector2(-COORDINATE_SYSTEM_SIZE * axis_scale + coordinate_system_center.x, coordinate_system_center.y), Vector2(COORDINATE_SYSTEM_SIZE * axis_scale + coordinate_system_center.x, coordinate_system_center.y), ColorN(\"slateblue\"), 2)
	
	# y line
	#draw_line(Vector2(coordinate_system_center.x, COORDINATE_SYSTEM_SIZE * axis_scale + coordinate_system_center.y), Vector2(coordinate_system_center.x, -COORDINATE_SYSTEM_SIZE * axis_scale + coordinate_system_center.y), ColorN(\"slateblue\"), 2)
	
	# x-Axis
	var vector_array = []
	for i in range(-COORDINATE_SYSTEM_SIZE, COORDINATE_SYSTEM_SIZE):
		vector_array.append(Vector2(axis_scale*i + coordinate_system_center.x - axis_scale, coordinate_system_center.y))
		vector_array.append(Vector2(axis_scale*i + coordinate_system_center.x, coordinate_system_center.y))
		vector_array.append(Vector2(axis_scale*i + coordinate_system_center.x, coordinate_system_center.y - axis_label_length))
		vector_array.append(Vector2(axis_scale*i + coordinate_system_center.x, coordinate_system_center.y + axis_label_length))
		
	draw_multiline(vector_array, ColorN(\"slateblue\"), stroke_width)
	#draw_polyline(vector_array, ColorN(\"slateblue\"), 2)
	
	# y-Axis
	vector_array = []
	for i in range(-COORDINATE_SYSTEM_SIZE, COORDINATE_SYSTEM_SIZE):
		vector_array.append(Vector2(coordinate_system_center.x, axis_scale*i + coordinate_system_center.y - axis_scale))
		vector_array.append(Vector2(coordinate_system_center.x, axis_scale*i + coordinate_system_center.y))
		vector_array.append(Vector2(coordinate_system_center.x -axis_label_length, axis_scale*i + coordinate_system_center.y))
		vector_array.append(Vector2(coordinate_system_center.x +axis_label_length, axis_scale*i + coordinate_system_center.y))
	draw_multiline(vector_array, ColorN(\"slateblue\"), stroke_width)
	
"

[node name="InGame" type="Node"]
script = ExtResource( 3 )

[node name="Island" type="Node2D" parent="."]

[node name="Level" parent="Island" instance=ExtResource( 2 )]

[node name="FunctionPreview" type="Node2D" parent="."]
script = SubResource( 1 )

[node name="GUI" parent="." instance=ExtResource( 1 )]
